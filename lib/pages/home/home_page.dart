import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:weather/api/api_Requests.dart';
import '../../api/Apiweek.dart';
import '../../api/conclusion.dart';
import 'home_widget.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  Autogenerated? response;
  Apiweek? weeklyResponse; // Add this line
  bool inProgress = false;
  bool showWeeklyForecast = false;

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        body: Container(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              _buildSearchWidget(),
              const SizedBox(height: 20),
              if (inProgress)
                CircularProgressIndicator()
              else if (showWeeklyForecast)
                _buildWeeklyForecastWidget()
              else
                Expanded(child: SingleChildScrollView(child: WeatherWidget(response: response))),
            ],
          ),
        ),
        bottomNavigationBar: Container(
          decoration: BoxDecoration(
            color: Colors.transparent, // Устанавливаем прозрачный фон
          ),
          child: _buildShowWeeklyForecastButton(),
        ),
      ),
    );
  }

  Widget _buildWeeklyForecastWidget() {
    if (weeklyResponse == null) {
      return const Text(
        'No weekly forecast available',
        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold), // Увеличиваем размер текста и делаем его полужирным
      );
    }

    return ListView.builder(
      shrinkWrap: true,
      itemCount: weeklyResponse!.forecast!.forecastday!.length,
      itemBuilder: (context, index) {
        final forecastDay = weeklyResponse!.forecast!.forecastday![index];
        return Card(
          child: ListTile(
            title: Text(
              forecastDay.date!,
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold), // Увеличиваем размер текста и делаем его полужирным
            ),
            subtitle: Text(
              'Max Temp: ${forecastDay.day!.maxtempC.toString()}°C',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold), // Увеличиваем размер текста и делаем его полужирным
            ),
            trailing: Text(
              'Min Temp: ${forecastDay.day!.mintempC.toString()}°C',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold), // Увеличиваем размер текста и делаем его полужирным
            ),
          ),
        );
      },
    );
  }

  Widget _buildSearchWidget() {
    return SearchBar(
      hintText: "Введите город на английском",
      onSubmitted: (value) {
        _getWeatherData(value);
      },
    );
  }


  Widget _buildShowWeeklyForecastButton() {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12.0), // Добавляем отступ сверху
      child: ElevatedButton(
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.yellowAccent, // Фиолетовый цвет кнопки
        ),
        onPressed: () {
          if (response != null) {
            if (showWeeklyForecast) {
              _getWeatherData(response!.location!.name!);
            } else {
              _getWeeklyForecast(response!.location!.name!);
            }
            setState(() {
              showWeeklyForecast = !showWeeklyForecast; // Обновляем showWeeklyForecast
            });
          }
        },
        child: Padding(
          padding: const EdgeInsets.all(16.5),
          child: Text(showWeeklyForecast ? 'Погода на неделю' : 'Погода сейчас',
            style: TextStyle(color: Colors.black),),
        ),
      ),
    );
  }


  _getWeeklyForecast(String location) async {
    setState(() {
      inProgress = true;
      weeklyResponse = null; // Сбрасываем weeklyResponse перед запросом
    });

    try {
      final response = await WeatherApi().getWeeklyForecast(location);
      setState(() {
        weeklyResponse = response;
      });
    } catch (e) {
      print('Exception: $e');
    } finally {
      setState(() {
        inProgress = false;
      });
    }
  }


  _getWeatherData(String location) async {
    setState(() {
      inProgress = true;
    });

    try {
      response = await WeatherApi().getCurrentWeather(location);
    } catch (e) {
      print('Exception: $e');
    } finally {
      setState(() {
        inProgress = false;
      });
    }
  }
}
